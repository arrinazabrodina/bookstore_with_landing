// <auto-generated />
using System;
using BookStoreWebApplication.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStoreWebApplication.Migrations
{
    [DbContext(typeof(DbbookStoreContext))]
    partial class DbbookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStoreWebApplication.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Birth_Date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortBiography")
                        .HasColumnType("ntext")
                        .HasColumnName("Short_Biography");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.AuthorsBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_Id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorsBooks");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.AuthorsGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_Id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_Id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("AuthorsGenres");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("BookstoreId")
                        .HasColumnType("int")
                        .HasColumnName("Bookstore_Id");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BookstoreId");

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cover_Type");

                    b.Property<string>("Genre")
                        .HasColumnType("ntext");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<short>("PublicationYear")
                        .HasColumnType("smallint")
                        .HasColumnName("Publication_Year");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.BooksGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_Id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BooksGenres");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Bookstore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Bookstores");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_Date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Phone_Number");

                    b.HasKey("Id");

                    b.ToTable("Buyer", (string)null);
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("Buyer_Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("Seller_Id");

                    b.HasKey("Id")
                        .HasName("PK_Buys");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("BuyId")
                        .HasColumnType("int")
                        .HasColumnName("Buy_Id");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Items");

                    b.HasIndex("BookId");

                    b.HasIndex("BuyId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_Date");

                    b.Property<int>("BookstoreId")
                        .HasColumnType("int")
                        .HasColumnName("Bookstore_Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookstoreId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.AuthorsBook", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Author", "Author")
                        .WithMany("AuthorsBooks")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorsBooks_Authors");

                    b.HasOne("BookStoreWebApplication.Models.Book", "Book")
                        .WithMany("AuthorsBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorsBooks_Books");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.AuthorsGenre", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Author", "Author")
                        .WithMany("AuthorsGenres")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorsGenres_Authors");

                    b.HasOne("BookStoreWebApplication.Models.Genre", "Genre")
                        .WithMany("AuthorsGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_AuthorsGenres_Genres");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Availability", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Book", "Book")
                        .WithMany("Availabilities")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_Availability_Books");

                    b.HasOne("BookStoreWebApplication.Models.Bookstore", "Bookstore")
                        .WithMany("Availabilities")
                        .HasForeignKey("BookstoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Availability_Bookstores");

                    b.Navigation("Book");

                    b.Navigation("Bookstore");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.BooksGenre", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Book", "Book")
                        .WithMany("BooksGenres")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BooksGenres_Books");

                    b.HasOne("BookStoreWebApplication.Models.Genre", "Genre")
                        .WithMany("BooksGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_BooksGenres_Genres");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Order", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Buyer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Buys_Buyer");

                    b.HasOne("BookStoreWebApplication.Models.Worker", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Buys_Workers");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.OrderItem", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_Items_Books");

                    b.HasOne("BookStoreWebApplication.Models.Order", "Buy")
                        .WithMany("OrderItems")
                        .HasForeignKey("BuyId")
                        .IsRequired()
                        .HasConstraintName("FK_Items_Buys");

                    b.Navigation("Book");

                    b.Navigation("Buy");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Worker", b =>
                {
                    b.HasOne("BookStoreWebApplication.Models.Bookstore", "Bookstore")
                        .WithMany("Workers")
                        .HasForeignKey("BookstoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Workers_Bookstores");

                    b.Navigation("Bookstore");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Author", b =>
                {
                    b.Navigation("AuthorsBooks");

                    b.Navigation("AuthorsGenres");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Book", b =>
                {
                    b.Navigation("AuthorsBooks");

                    b.Navigation("Availabilities");

                    b.Navigation("BooksGenres");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Bookstore", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Buyer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Genre", b =>
                {
                    b.Navigation("AuthorsGenres");

                    b.Navigation("BooksGenres");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BookStoreWebApplication.Models.Worker", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
